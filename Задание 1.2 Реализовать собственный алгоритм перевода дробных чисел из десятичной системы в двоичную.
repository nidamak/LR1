program Dzhaparova;

var
  num: Real;          // Вводимое десятичное число
  intPart: Integer;   // Целая часть десятичного числа
  fracPart: Real;     // Дробная часть десятичного числа
  binIntPart: String; // Двоичное представление целой части
  binFracPart: String;// Двоичное представление дробной части
  i: Integer;
begin
  // Запрашиваем у пользователя ввод десятичного числа
  Write('Введите десятичное число: ');
  ReadLn(num);

  // Разделение числа на целую и дробную часть
  intPart := Trunc(num);         // Извлекаем целую часть
  fracPart := num - intPart;     // Извлекаем дробную часть

  // Перевод целой части числа в двоичную систему
  binIntPart := '';
  if intPart = 0 then
    binIntPart := '0'            // Если целая часть равна 0, то двоичное представление тоже 0
  else
    while intPart > 0 do
    begin
      // Получаем остаток при делении на 2 и формируем двоичное представление целой части
      binIntPart := Chr(48 + (intPart mod 2)) + binIntPart;
      intPart := intPart div 2;  // Делим целую часть на 2 для перехода к следующему биту
    end;

  // Перевод дробной части числа в двоичную систему
  binFracPart := '';
  for i := 1 to 10 do // Ограничиваем количество знаков дробной части до 10
  begin
    fracPart := fracPart * 2;    // Умножаем дробную часть на 2
    if fracPart >= 1 then        // Если дробная часть больше или равна 1
    begin
      binFracPart := binFracPart + '1'; // Добавляем '1' к двоичному представлению дробной части
      fracPart := fracPart - 1; // Уменьшаем дробную часть на 1
    end
    else
      binFracPart := binFracPart + '0'; // Добавляем '0', если дробная часть меньше 1

    if fracPart = 0 then          // Если дробная часть стала 0, выходим из цикла
      Break;
  end;

  // Формируем и выводим результат
  if binFracPart = '' then
    WriteLn('Двоичное представление: ', binIntPart) // Если дробная часть пустая, выводим только целую часть
  else
    WriteLn('Двоичное представление: ', binIntPart, '.', binFracPart); // Выводим и целую, и дробную часть
end.

// Входные данные:                 Выходные данные:
// 4.5                             Двоичное представление: 100.1
// 5.8                             Двоичное представление: 101.1100110011
// 3.4                             Двоичное представление: 11.01100110011
