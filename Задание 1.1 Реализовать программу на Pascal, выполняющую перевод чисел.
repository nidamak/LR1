program Dzhaparova;  

var
  num, temp, f, t, g: Integer; // Объявление переменных для работы с числами
  binStr, octStr, hexStr: String; // Строки для двоичного, восьмеричного и шестнадцатеричного представлений
  hexChars: String = '0123456789ABCDEF'; // Строка для символов шестнадцатеричной системы

  bin_Str: String; // Строка для хранения двоичного числа, введенного пользователем
  dec, i, power: Integer; // Переменные для конвертации двоичного числа в десятичное

  hex_Str: String; // Строка для хранения шестнадцатеричного числа, введенного пользователем
  decValue, j, digit: Integer; // Переменные для конвертации шестнадцатеричного числа в десятичное

begin
  Write('Введите десятичное число: '); // Запрос ввода десятичного числа
  ReadLn(num); 
  
  // Конвертация десятичного числа в двоичное
  temp := num; // Сохраняем начальное значение в temp
  binStr := ''; // Инициализация строки для двоичного числа
  repeat
    f := temp mod 2; // Получение остатка от деления на 2 (0 или 1)
    binStr := Chr(48 + (f)) + binStr; // Конвертация в символ и добавление в строку
    temp := temp div 2; // Делим число на 2 для следующей итерации
  until temp = 0; // Повторяем, пока temp не станет равным 0
  WriteLn('Двоичное представление: ', binStr); // Вывод двоичного представления
  
  // Конвертация десятичного числа в восьмеричное
  temp := num; // Сбрасываем temp к исходному значению
  octStr := ''; // Инициализация строки для восьмеричного числа
  repeat
    t := temp mod 8; // Получение остатка от деления на 8
    octStr := Chr(48 + (t)) + octStr; // Конвертация в символ и добавление в строку
    temp := temp div 8; // Делим число на 8 для следующей итерации
  until temp = 0; // Повторяем, пока temp не станет равным 0
  WriteLn('Восьмеричное представление: ', octStr); // Вывод восьмеричного представления
  
  // Конвертация десятичного числа в шестнадцатеричное
  temp := num; // Сбрасываем temp к исходному значению
  hexStr := ''; // Инициализация строки для шестнадцатеричного числа
  repeat
    g := temp mod 16; // Получение остатка от деления на 16
    hexStr := hexChars[g] + hexStr; // Извлекаем соответствующий символ и добавляем в строку
    temp := temp div 16; // Делим число на 16 для следующей итерации
  until temp = 0; // Повторяем, пока temp не станет равным 0
  WriteLn('Шестнадцатеричное представление: ', hexStr); // Вывод шестнадцатеричного представления
  
  //------------------------------------------------------------------------------------------------------------
  // Ввод двоичного числа пользователем
  Writeln(); // Вывод пустой строки
  Writeln(); // Вывод пустой строки
  Write('Введите двоичное число: '); // Запрос ввода двоичного числа
  ReadLn(binStr); // Чтение двоичного числа
  
  dec := 0; // Инициализация переменной для хранения десятичного значения
  power := 1; // Начальная степень двойки (2^0 = 1)
  
  // Проход по строке двоичного числа с конца в начало
  for i := Length(binStr) downto 1 do
  begin
    if binStr[i] = '1' then
      dec := dec + power; // Если символ '1', добавляем текущую степень двойки
    power := power * 2; // Умножаем степень двойки на 2 для следующей итерации
  end;
  
  // Вывод результата
  WriteLn('Десятичное представление: ', dec); // Вывод десятичного эквивалента двоичного числа
//-----------------------------------------------------------------------------------------------------------------
  
  Writeln(); // Вывод пустой строки
  Writeln(); // Вывод пустой строки
  
  Write('Введите шестнадцатеричное число: '); // Запрос ввода шестнадцатеричного числа
  ReadLn(hex_Str); // Чтение шестнадцатеричного числа
  
  decValue := 0; // Инициализация переменной для хранения десятичного значения шестнадцатеричного числа
  
  // Конвертация шестнадцатеричного числа в десятичное
  for j := 1 to Length(hex_Str) do
  begin
    case hex_Str[j] of // Используем правильное имя переменной
      '0'..'9': digit := Ord(hex_Str[j]) - Ord('0'); // Если цифра от 0 до 9
      'A'..'F': digit := Ord(hex_Str[j]) - Ord('A') + 10; // Если буква от A до F
      'a'..'f': digit := Ord(hex_Str[j]) - Ord('a') + 10; // Если буква от a до f
    else
      begin
        WriteLn('Ошибка: некорректный символ в числе.'); // Обработка некорректных символов
        Exit; // Завершение программы
      end;
    end;
    
    decValue := decValue * 16 + digit; // Конвертируем шестнадцатеричное число в десятичное
  end;
  
  WriteLn('Десятичное представление: ', decValue); // Вывод десятичного эквивалента шестнадцатеричного числа
end. 

// Входные данные:                 Выходные данные:
// 2006                            Двоичное представление: 11111010110
//                                 Восьмеричное представление: 3726
//                                 Шестнадцатеричное представление: 7D6
// 1101                            Десятичное представление: 13
// 6С5                             Десятичное представление: 1733
