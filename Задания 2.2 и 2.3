2.	Используя дизассемблер (например, ILSpy, dotPeek или встроенный в Visual Studio), изучить машинные коды (IL-код, а затем ассемблерный код).
C#:
using System;

static int Add(int x, int y)
{
    return x+y;
}
IL:
IL_0000: nop        
IL_0001: ldarg.0
IL_0002: ldarg.1        
IL_0003: add
IL_0004: stloc.0        
IL_0005: br.s IL_0007
IL_0007: ldloc.0
IL_0008: ret

Исходный IL-код будет примерно таким же, как тот, который вы представили:
IL_0000: nop
IL_0001: ldarg.0      // Загружаем первый аргумент x
IL_0002: ldarg.1      // Загружаем второй аргумент y
IL_0003: add          // Складываем x и y
IL_0004: stloc.0      // Сохраняем результат в локальную переменную
IL_0005: br.s IL_0007 // Переход к IL_0007
IL_0007: ldloc.0      // Загружаем локальную переменную (результат сложения)
IL_0008: ret          // Возврат из метода

3.	Исследовать, как представлены в памяти:
o	целые числа (int, long, byte);
o	вещественные числа (float, double);
o	строки.
1. Целые числа

- byte
  - Размер: 1 байт (8 бит).
  - Диапазон: 0 до 255.
  - Пример: byte b = 100; → в памяти: 01100100.

- int
  - Размер: 4 байта (32 бита).
  - Диапазон: -2,147,483,648 до 2,147,483,647.
  - Пример: int x = 123456; → в памяти: 00000001 11101100 00000000 00000000.

- long
  - Размер: 8 байт (64 бита).
  - Диапазон: -9,223,372,036,854,775,808 до 9,223,372,036,854,775,807.
  - Пример: long y = 1234567890123;.

2. Вещественные числа

- float
  - Размер: 4 байта (32 бита).
  - Стандарт: IEEE 754 (одинарная точность).
  - Пример: float f = 123.456f; → представляется в виде 1 бита знака, 8 бит экспоненты, 23 бита мантиссы.

- double
  - Размер: 8 байт (64 бита).
  - Стандарт: IEEE 754 (двойная точность).
  - Пример: double d = 123.456;.

3. Строки

- string
  - Строки в C# представляют собой объекты, хранящиеся в управляемой куче.
  - Каждый символ хранится в формате UTF-16 (2 байта на символ).
  - Пример: "Hello" → в памяти: 0x4800 0x6500 0x6C00 0x6C00 0x6F00.
